// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc27.Robot.subsystems;

import org.usfirst.frc27.Robot.RobotMap;
import org.usfirst.frc27.Robot.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon _leftMaster = RobotMap.driveTrainLeftMotor1;
    private final CANTalon _leftSlave1 = RobotMap.driveTrainLeftMotor2;
    private final CANTalon _leftSlave2 = RobotMap.driveTrainLeftMotor3;
    private final CANTalon _rightMaster = RobotMap.driveTrainRightMotor1;
    private final CANTalon _rightSlave1 = RobotMap.driveTrainRightMotor2;
    private final CANTalon _rightSlave2 = RobotMap.driveTrainRightMotor3;

    private final RobotDrive robotDrive;  

    public DriveTrain()
    {
    	robotDrive = new RobotDrive(_leftMaster, _rightMaster);
    	robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
    	robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
    	
    	//Slave2's are commented because we are on the kitbot, which only has 2
    	//motors per side.  In production, we will use 3 motors per side.
    	
    	_leftSlave1.changeControlMode(TalonControlMode.Follower);
    	_leftSlave2.changeControlMode(TalonControlMode.Follower);
    	_rightSlave1.changeControlMode(TalonControlMode.Follower);
    	_rightSlave2.changeControlMode(TalonControlMode.Follower);
    	
    	_leftSlave1.set(_leftMaster.getDeviceID());
    	_leftSlave2.set(_leftMaster.getDeviceID());
    	_rightSlave1.set(_rightMaster.getDeviceID());
    	_rightSlave2.set(_rightMaster.getDeviceID());
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() 
    { 
	    // Set the default command for a subsystem here. 
	    //setDefaultCommand(new MySpecialCommand()); 
	    setDefaultCommand(new DriveWithJoysticks()); 
    } 

    public void takeJoystickInputs(Joystick leftJoystick, Joystick rightJoystick)
    {
    	robotDrive.tankDrive(leftJoystick, rightJoystick);
    }


	public void stop() 
	{	
		robotDrive.tankDrive(0, 0);
	}
}

